// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let heap[0] = 0;     // next
        let heap[1] = 14334; // len
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var bool searchingSegment;
        var Array segment;
        var int segmentSize;
        var int seg1;

        let searchingSegment = true;
        let segment = heap;

        while (searchingSegment)
        {
            if ((segment[1] - 1) > size)
            {
                let searchingSegment = false;
            }
            else
            {
                if (segment[0] = 0)
                {
                    return 0;
                }
                let segment = segment[0];
            }
        }

        let segment[1] = segment[1] - (size + 2);
        let seg1 = segment[1];
        let segment[seg1 + 2] = 0;
        let segment[seg1 + 3] = size;
        return segment + seg1 + 4;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var bool searchingSegment;
        var Array segment;

        let searchingSegment = true;
        let segment = heap;

        while (searchingSegment)
        {
            if (segment[0] = 0)
            {
                let searchingSegment = false;
            }
            else
            {
                let segment = segment[0];
            }
        }

        let segment[0] = (o - 2);
        return;
    }    
}
