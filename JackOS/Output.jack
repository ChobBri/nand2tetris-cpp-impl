// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Output.jack
/**
 * A library of functions for writing text on the screen.
 * The Hack physical screen consists of 512 rows of 256 pixels each.
 * The library uses a fixed font, in which each character is displayed 
 * within a frame which is 11 pixels high (including 1 pixel for inter-line 
 * spacing) and 8 pixels wide (including 2 pixels for inter-character spacing).
 * The resulting grid accommodates 23 rows (indexed 0..22, top to bottom)
 * of 64 characters each (indexed 0..63, left to right). The top left 
 * character position on the screen is indexed (0,0). A cursor, implemented
 * as a small filled square, indicates where the next character will be displayed.
 */
class Output {

    // Character map for displaying characters
    static Array charMaps; 
    static int cursCol, cursRow;

    /** Initializes the screen, and locates the cursor at the screen's top-left. */
    function void init() {
        let cursCol = 0;
        let cursRow = 0;
        do Output.initMap();
        return;
    }

    // Initializes the character map array
    function void initMap() {
        let charMaps = Array.new(127);
        
        do Output.create(32,0,0,0,0,0,0,0,0,0,0,0);          //
        
        do Output.create(48,12,30,51,51,51,51,51,30,12,0,0); // 0
        do Output.create(49,12,14,15,12,12,12,12,12,63,0,0); // 1
        do Output.create(50,30,51,48,24,12,6,3,51,63,0,0);   // 2
        do Output.create(51,30,51,48,48,28,48,48,51,30,0,0); // 3
        do Output.create(52,16,24,28,26,25,63,24,24,60,0,0); // 4
        do Output.create(53,63,3,3,31,48,48,48,51,30,0,0);   // 5
        do Output.create(54,28,6,3,3,31,51,51,51,30,0,0);    // 6
        do Output.create(55,63,49,48,48,24,12,12,12,12,0,0); // 7
        do Output.create(56,30,51,51,51,30,51,51,51,30,0,0); // 8
        do Output.create(57,30,51,51,51,62,48,48,24,14,0,0); // 9
        
        do Output.create(58,0,0,12,12,0,0,12,12,0,0,0);      // :

        do Output.create(76,3,3,3,3,3,3,35,51,63,0,0);       // L

        do Output.create(101,0,0,0,30,51,63,3,51,30,0,0);      // e
        do Output.create(105,12,12,0,14,12,12,12,12,30,0,0);   // i
        do Output.create(110,0,0,0,29,51,51,51,51,51,0,0);     // n
        do Output.create(115,0,0,0,30,51,6,24,51,30,0,0);      // s

	return;
    }

    // Creates the character map array of the given character index, using the given values.
    function void create(int index, int a, int b, int c, int d, int e,
                         int f, int g, int h, int i, int j, int k) {
	var Array map;

	let map = Array.new(11);
        let charMaps[index] = map;

        let map[0] = a;
        let map[1] = b;
        let map[2] = c;
        let map[3] = d;
        let map[4] = e;
        let map[5] = f;
        let map[6] = g;
        let map[7] = h;
        let map[8] = i;
        let map[9] = j;
        let map[10] = k;

        return;
    }

    /** Moves the cursor to the j-th column of the i-th row,
     *  and erases the character displayed there. */
    function void moveCursor(int i, int j) {
        let cursRow = i;
        let cursCol = j;

        return;
    }

    /** Displays the given character at the cursor location,
     *  and advances the cursor one column forward. */
    function void printChar(char c) {
        var Array charMap;
        var int row, col;
        var int pixels;
        var int baseY, baseX;
        var int pow;

        let row = 0;
        let col = 0;
        let charMap = charMaps[c];

        let baseX = cursCol * 8;
        let baseY = cursRow * 11;

        while (row < 11)
        {
            let pow = 1;
            let pixels = charMap[row];
            while (col < 8)
            {
                do Screen.setColor((pixels & pow) = 0);
                do Screen.drawPixel(baseX + col, baseY + row);
                let pow = pow + pow;
                let col = col + 1;
            }
            let col = 0;
            let row = row + 1;
        }

        let cursCol = cursCol + 1;
        return;
    }

    /** displays the given string starting at the cursor location,
     *  and advances the cursor appropriately. */
    function void printString(String s) {
        var int len;
        var int i;

        let i = 0;
        let len = s.length();
        while (i < len)
        {
            do Output.printChar(s.charAt(i));
            let i = i + 1;
        }

        return;
    }

    /** Displays the given integer starting at the cursor location,
     *  and advances the cursor appropriately. */
    function void printInt(int i) {
        var String s;
        let s = String.new(20);
        do s.setInt(i);
        do Output.printString(s);
        do s.dispose();
        return;
    }
}
