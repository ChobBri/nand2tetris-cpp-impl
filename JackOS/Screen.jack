// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean colorState;
    static Array powersOfTwo;
    /** Initializes the Screen. */
    function void init() {
        var int power, i;
        let colorState = true;
        let power = 1;
        let i = 0;
        let powersOfTwo = Array.new(16);
        while (i < 16)
        {
            let powersOfTwo[i] = power;
            let power = power + power;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let colorState = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value;
        var int mod;
        var int xdiv;
        var int pow;
        let xdiv = x / 16;
        let address = (y * 32) + xdiv + 16384;
        let value = Memory.peek(address);
        let mod = x - (xdiv * 16);
        let pow = powersOfTwo[mod];
        if (((value & pow) = 0) = colorState)
        {
            if (~colorState)
            {
                let pow = -pow;
            }
            do Memory.poke(address, value + pow);
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        if (x1 = x2)
        {
            let y2 = y2 + 1;
            while (y1 < y2)
            {
                do Screen.drawPixel(x1, y1);
                let y1 = y1 + 1;
            }
            return;
        }

        let x2 = x2 + 1;
        // assume dy = 0
        while (x1 < x2)
        {
            do Screen.drawPixel(x1, y1);
            let x1 = x1 + 1;
        }
        return;
    }
}
