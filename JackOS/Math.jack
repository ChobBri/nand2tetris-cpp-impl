// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        var int power, i;
        let power = 1;
        let i = 0;
        let powersOfTwo = Array.new(16);
        while (i < 16)
        {
            let powersOfTwo[i] = power;
            let power = power + power;
            let i = i + 1;
        }
        return;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int sum, shiftedx;
        var int pow;

        let sum = 0;
        let shiftedx = x;
        let pow = 1;
        while (pow > 0)
        {
            if ((y & pow) > 0)
            {
                let sum = sum + shiftedx;
            }
            let pow = pow + pow;
            let shiftedx = shiftedx + shiftedx;
        }
        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
        var int q, r;
        var int i;
        var int ym1;
        var int neg1;
        var int pow;

        let i = 15;
        let neg1 = -1;
        
        let ym1 = y - 1;
        while (i > neg1)
        {
            let pow = powersOfTwo[i];
            let r = r + r;
            if ((x & pow) > 0)
            {
                let r = r + 1;
            }
            if (r > ym1)
            {
                let r = r - y;
                let q = q + pow;
            }
            let i = i - 1;
        }

        return q;
    }
}
