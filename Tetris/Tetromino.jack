/**
 * Implements the Square game.
 * This simple game allows the user to move a black square around
 * the screen, and change the square's size during the movement.
 * When the game starts, a square of 30 by 30 pixels is shown at the
 * top-left corner of the screen. The user controls the square as follows.
 * The 4 arrow keys are used to move the square up, down, left, and right.
 * The 'z' and 'x' keys are used, respectively, to decrement and increment
 * the square's size. The 'q' key is used to quit the game.
 */

class Tetromino {
    field int size, len, i;
    field Array pieceArea;

    constructor Tetromino new(int pieceType) {
        if (pieceType = 0) {
            let size = 4;
            let len = 16;
        }

        if (pieceType = 1) {
            let size = 2;
            let len = 4;
        }

        if (pieceType > 1) {
            let size = 3;
            let len = 9;
        }

        let pieceArea = Array.new(len);
        let i = 0;
        while (i < len)
        {
            let pieceArea[i] = null;
            let i = i + 1;
        }
    
        if (pieceType = 0) {
            let pieceArea[4] = Mino.new();
            let pieceArea[5] = Mino.new();
            let pieceArea[6] = Mino.new();
            let pieceArea[7] = Mino.new();
        }

        if (pieceType = 1) {
            let pieceArea[0] = Mino.new();
            let pieceArea[1] = Mino.new();
            let pieceArea[2] = Mino.new();
            let pieceArea[3] = Mino.new();
        }


        if (pieceType = 2) {
            let pieceArea[2] = Mino.new();
            let pieceArea[3] = Mino.new();
            let pieceArea[4] = Mino.new();
            let pieceArea[5] = Mino.new();
        }

        if (pieceType = 3) {
            let pieceArea[0] = Mino.new();
            let pieceArea[3] = Mino.new();
            let pieceArea[4] = Mino.new();
            let pieceArea[5] = Mino.new();
        }

        if (pieceType = 4) {
            let pieceArea[1] = Mino.new();
            let pieceArea[2] = Mino.new();
            let pieceArea[3] = Mino.new();
            let pieceArea[4] = Mino.new();
        }

        if (pieceType = 5) {
            let pieceArea[1] = Mino.new();
            let pieceArea[3] = Mino.new();
            let pieceArea[4] = Mino.new();
            let pieceArea[5] = Mino.new();
        }

        if (pieceType = 6) {
            let pieceArea[0] = Mino.new();
            let pieceArea[1] = Mino.new();
            let pieceArea[4] = Mino.new();
            let pieceArea[5] = Mino.new();
        }

        return this;
    }

    method boolean hasMino(int x, int y) {
        return ~(pieceArea[(y * size) + x] = null);
    }

    method Mino getMino(int x, int y) {
        var Mino mino;
        let x = (y * size) + x;
        let mino = pieceArea[x];
        let pieceArea[x] = null;
        return mino;
    }

    method int getSize() {
        return size;
    }

    method void rotate(boolean rightFlag) {
        var Array pieceAreaCopy;
        var int c, r;
        let i = 0;

        let pieceAreaCopy = Array.new(len);
        while (i < len)
        {
            let pieceAreaCopy[i] = pieceArea[i];
            let i = i + 1;
        }

        let i = 0;
        let r = 0;
        while (r < size)
        {
            let c = 0;
            while (c < size)
            {
                if (rightFlag)
                {
                    let pieceArea[(size - r - 1) + (c * size)] = pieceAreaCopy[i];
                }
                else
                {
                    let pieceArea[r + ((size - c - 1) * size)] = pieceAreaCopy[i];
                }
                let c = c + 1;
                let i = i + 1;
            }
            let c = 0;
            let r = r + 1;
        }

        do pieceAreaCopy.dispose();
        return;    
    }

    method void show(int x, int y, boolean setShow) {
        var Mino mino;
        var int xstart;
        var int xend, yend;
        var int s10;

        let s10 = size * 10;
        let xend = x + s10;
        let yend = y + s10;
        let xstart = x;

        let i = 0;
        while (y < yend)
        {
            while (x < xend)
            {
                let mino = pieceArea[i];
                if (~(mino = null))
                {
                    do mino.show(x, y, setShow);
                }
                let x = x + 10;
                let i = i + 1;
            }
            let x = xstart;
            let y = y + 10;
        }
        return;
    }

    method void dispose() {
        var Mino mino;
        let i = 0;

        while (i < len)
        {
            let mino = pieceArea[i];
            if (~(mino = null))
            {
                do mino.dispose();
            }
            let i = i + 1;
        }
        do pieceArea.dispose();
        return;
    }
}



