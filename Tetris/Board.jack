/**
 * Implements the Square game.
 * This simple game allows the user to move a black square around
 * the screen, and change the square's size during the movement.
 * When the game starts, a square of 30 by 30 pixels is shown at the
 * top-left corner of the screen. The user controls the square as follows.
 * The 4 arrow keys are used to move the square up, down, left, and right.
 * The 'z' and 'x' keys are used, respectively, to decrement and increment
 * the square's size. The 'q' key is used to quit the game.
 */
class Board {
    field Array minos;

    field int width;
    field int height;
    field int cellCount;

    /** Constructs a new square game. */
    constructor Board new() {
        var int i;
        var int cellCount;
        let width = 10;
        let height = 20;
        let cellCount = width * height;

        let i = 0;
        let minos = Array.new(cellCount);
        while (i < cellCount) {
            let minos[i] = null;
            let i = i + 1;
        }
        return this;
    }

    method int processBoardClear() {
        var int clearCount;
        var int c, r;
        var int srcindex;
        var int dstindex;
        var Mino mino;

        let clearCount = 0;
        let srcindex = 0;
        let dstindex = 0;

        let r = height - 1;
        while (r > -1) 
        {
            let c = 0;
            while (c < width)
            {
                if (hasMino(c, r))
                {
                    let c = c + 1;
                }
                else
                {
                    let c = width + 1;
                }
            }

            if (c = width) {
                let clearCount = clearCount + 1;
                let c = 0;
                while (c < width)
                {
                    let srcindex = (r * width) + c; 
                    let mino = minos[srcindex];
                    do mino.hide(33 + (c * Mino.getSize()), 33 + (r * Mino.getSize()));
                    do mino.dispose();
                    let minos[srcindex] = null;
                    let c = c + 1;
                }
            }
            else
            {
                let c = 0;
                while (c < width)
                {
                    let srcindex = (r * width) + c; 
                    let dstindex = ((r + clearCount) * width) + c;
                    if (hasMino(c, r)) {
                        let mino = minos[srcindex];
                        do mino.hide(33 + (c * Mino.getSize()), 33 + (r * Mino.getSize()));
                        let minos[dstindex] = minos[srcindex];
                        if (clearCount > 0)
                        {
                            let minos[srcindex] = null;
                        }
                        do mino.show(33 + (c * Mino.getSize()), 33 + ((r + clearCount) * Mino.getSize()));
                    }
                    let c = c + 1;
                }
            }
            let r = r - 1;
        }

        return clearCount;
    }

    method boolean isColliding(int x, int y, Tetromino tetromino) {
        var int index;
        var int c, r;
        var int size;

        let c = x;
        let r = y;
        let size = tetromino.getSize();

        while (r < (y + size)) {
            while (c < (x + size)) {
                if (tetromino.hasMino(c - x, r - y)) {
                    if (isValidPos(c, r))
                    {
                        if (hasMino(c, r)) {
                            return true;
                        }
                    }
                    else
                    {
                        return true;
                    }
                }
                let c = c + 1;
            }
            let c = x;
            let r = r + 1;
        }
        return false;
    }

    method void addMino(int x, int y, Mino mino) {
        let minos[(y * width) + x] = mino;
        return;
    }

    method boolean isValidPos(int x, int y) {
        if (x < 0) {
            return false;
        }
        if (x > (width - 1)) {
            return false;
        }
        if (y < 0) {
            return false;
        }
        if (y > (height - 1)) {
            return false;
        }
        return true;
    }

    method boolean hasMino(int x, int y) {
        if (minos[(y * width) + x] = null)
        {
            return false;
        }
        return true;
    }

    method int getWidth() {
        return width;
    }

    method int getHeight() {
        return height;
    }

    /** Disposes this game. */
    method void dispose() {
        var Mino mino;
        var int i;

        let i = 0;
        while (i < cellCount) {
            let mino = minos[i];
            if (mino = null) {
                do mino.dispose();
            }
            let i = i + 1;
        }
        do minos.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void show(int x, int y) {
        var int minoSize;
        var int boardWidth, boardHeight;

        let minoSize = Mino.getSize();
        let boardWidth = (minoSize * width) + 6;
        let boardHeight = (minoSize * height) + 6;

        do Screen.setColor(true);
        do Screen.drawLine(x, y, x + boardWidth - 1, y);
        do Screen.drawLine(x, y, x, y + boardHeight - 1);
        do Screen.drawLine(x + boardWidth - 1, y, x + boardWidth - 1, y + boardHeight - 1);
        do Screen.drawLine(x, y + boardHeight - 1, x + boardWidth - 1, y + boardHeight - 1);
        do Screen.setColor(true);
        do Screen.drawLine(x + 2, y + 2, x + boardWidth - 1 - 2, y + 2);
        do Screen.drawLine(x + 2, y + 2, x + 2, y + boardHeight - 1 - 2);
        do Screen.drawLine(x + boardWidth - 1 - 2, y + 2, x + boardWidth - 1 - 2, y + boardHeight - 1 - 2);
        do Screen.drawLine(x + 2, y + boardHeight - 1 - 2, x + boardWidth - 1 - 2, y + boardHeight - 1 - 2);
        return;
    }

    method void hide(int x, int y) {
        return;
    }
}



