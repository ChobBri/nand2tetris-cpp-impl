/**
 * Implements the Square game.
 * This simple game allows the user to move a black square around
 * the screen, and change the square's size during the movement.
 * When the game starts, a square of 30 by 30 pixels is shown at the
 * top-left corner of the screen. The user controls the square as follows.
 * The 4 arrow keys are used to move the square up, down, left, and right.
 * The 'z' and 'x' keys are used, respectively, to decrement and increment
 * the square's size. The 'q' key is used to quit the game.
 */
class TetrisGame {
    field Board gameBoard;

    field Array pieceBag;
    field int pieceIndex;

    field Tetromino currentTetromino;

    field int points;

    field int curX, curY;

    field int dropRate;
    field int dropTimer;

    field int keyHoldRate;
    field int keyHoldTimer;

    field char keyPressTick;

    field boolean isGameOver;

    /** Constructs a new square game. */
    constructor TetrisGame new() {
        let gameBoard = Board.new();

        let pieceBag = Array.new(7);
        let pieceIndex = 8;

        let keyPressTick = 12;

        let currentTetromino = Tetromino.new(getPiece(keyPressTick));
        let curX = 3;
        let curY = 0;

        do currentTetromino.show(63, 33, true);

        let dropRate = 120;
        let dropTimer = 0;

        let keyHoldRate = 10;
        let keyHoldTimer = 0;

        let isGameOver = false;
        let points = 0;

        do Output.moveCursor(13, 32);
        do Output.printString("Lines: 0");
        return this;
    }

    method int getPiece(char seed) {
        var int piece;
        var char i;
        var char temp;
        var char rand;
        if (pieceIndex > 6) {
            let pieceIndex = 0;
            let pieceBag[0] = 0;
            let pieceBag[1] = 1;
            let pieceBag[2] = 2;
            let pieceBag[3] = 3;
            let pieceBag[4] = 4;
            let pieceBag[5] = 5;
            let pieceBag[6] = 6;

            let i = 0;
            let temp = 0;
            let rand = 0;
            while (i < 7) {
                let temp = pieceBag[i];
                let rand = TetrisGame.random(seed, 7 - i);
                let pieceBag[i] = pieceBag[i + rand];
                let pieceBag[i + rand] = temp;
                let i = i + 1;
            }
        }

        let piece = pieceBag[pieceIndex];
        let pieceIndex = pieceIndex + 1;
        return piece;
    }

    function char random(char seed, char limit) {
        var char s;
        let s = seed * 1497 + 11233;
        let s = ((s & (~1237)) | ((~s) & 1237));
        let s = s - ((s / limit) * limit);
        if (s > (limit - 1)) {
            return limit - 1;
        }
        if (s < 0) {
            return 0;
        }
        return s;
    }

    /** Disposes this game. */
    //method void dispose() {
    //    do gameBoard.dispose();
    //    if (~(currentTetromino = null))
    //    {
    //        do currentTetromino.dispose();
    //    }
    //    do Memory.deAlloc(this);
    //    return;
    //}

    /** Runs the game: handles the user's inputs and moves the square accordingly */
    method void run() {
         var char key;  // the key currently pressed by the user
         var char prevKey;

        let key = 0;
        let prevKey = 0;
        
        while (~isGameOver) {
            // waits for a key to be pressed
            let key = Memory.peek(24576);

            if (~(key = prevKey) | (keyHoldTimer > keyHoldRate))
            {
                if (~(key = prevKey))
                {
                    let keyHoldTimer = 0;
                }

                let keyPressTick = keyPressTick + 1; 

                do currentTetromino.show(33 + (curX * 10), 33 + (curY * 10), false);
                if ((key = 122) | (key = 90)) { 
                    do currentTetromino.rotate(false);
                    if (gameBoard.isColliding(curX, curY, currentTetromino))
                    {
                        do currentTetromino.rotate(true);
                    }
                }
                if ((key = 120) | (key = 88)) { 
                    do currentTetromino.rotate(true);
                    if (gameBoard.isColliding(curX, curY, currentTetromino))
                    {
                        do currentTetromino.rotate(false);
                    }
                }
                if (key = 130) {
                    let curX = curX - 1; 
                    if (gameBoard.isColliding(curX, curY, currentTetromino))
                    {
                        let curX = curX + 1; 
                    }
                }
                if (key = 132) {
                    let curX = curX + 1; 
                    if (gameBoard.isColliding(curX, curY, currentTetromino))
                    {
                        let curX = curX - 1; 
                    }
                }
                if (key = 133) {
                    do processBoardCollision();
                }
                do currentTetromino.show(33 + (curX * 10), 33 + (curY * 10), true);
            }
            else
            {
                let keyHoldTimer = keyHoldTimer + 1;
            }

            let dropTimer = dropTimer + 1;
            if (dropTimer > dropRate)
            {
                do processBoardCollision();
            }

            let prevKey = key;
            do Sys.wait(16);
        } // while
        return;
    }

    method void processBoardCollision() {
        var int c, r;
        var int len;
        var int size;
        var int clearCount;

        var int xadj, yadj;
        let xadj = 33 + (curX * 10);
        let yadj = 33 + (curY * 10);

        do currentTetromino.show(xadj, yadj, false);
        let curY = curY + 1; 
        let yadj = yadj + 10;
        if (gameBoard.isColliding(curX, curY, currentTetromino))
        {
            let curY = curY - 1;
            let c = 0;
            let r = 0;
            let size = currentTetromino.getSize(); 
            
            do currentTetromino.show(xadj, yadj - 10, true);
            while (r < size) {
                while (c < size) {
                    if (currentTetromino.hasMino(c, r)) {
                        do gameBoard.addMino(curX + c, curY + r, currentTetromino.getMino(c, r));
                    }
                    let c = c + 1;
                }
                let c = 0;
                let r = r + 1;
            }
            do currentTetromino.dispose();

            let clearCount = gameBoard.processBoardClear();
            let keyHoldTimer = 0;

            let dropRate = dropRate - clearCount;
            if (dropRate < 20) {
                let dropRate = 20;
            }

            do Screen.setColor(false);
            do Output.moveCursor(13, 39);
            do Output.printInt(points);
            let points = points + clearCount;
            do Screen.setColor(true);
            do Output.moveCursor(13, 39);
            do Output.printInt(points);

            let currentTetromino = Tetromino.new(getPiece(keyPressTick));
            let curX = 3;
            let curY = 0;
            if (gameBoard.isColliding(curX, curY, currentTetromino))
            {
                let isGameOver = true;
            }
            let xadj = 63;
            let yadj = 33;
        }

        do currentTetromino.show(xadj, yadj, true);

        let dropTimer = 0;
        return;
    }
}



